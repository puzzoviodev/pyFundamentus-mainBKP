# Define uma classe chamada PVPEvaluator. Em Python, classes s√£o estruturas que agrupam dados (atributos)
# e comportamentos (m√©todos). Elas s√£o instanciadas para criar objetos.
class PVPEvaluator:

    # M√©todo especial __init__ √© o construtor da classe. √â chamado automaticamente quando um objeto √© criado.
    # Ele inicializa os atributos da inst√¢ncia.
    def __init__(self):
        # Atributo de inst√¢ncia que armazena uma string multilinha com a defini√ß√£o do indicador P/VP.
        # Strings multilinha s√£o delimitadas por tr√™s aspas simples ou duplas.
        self.definicao = '''
        O Pre√ßo/Valor Patrimonial (P/VP) compara o pre√ßo da a√ß√£o ao valor patrimonial por a√ß√£o, calculado
        como (Pre√ßo da A√ß√£o / Valor Patrimonial por A√ß√£o). √â um indicador de valuation que avalia se a
        a√ß√£o est√° cara ou barata em rela√ß√£o aos ativos l√≠quidos da empresa. Um P/VP baixo sugere
        subvaloriza√ß√£o, enquanto um valor alto indica sobrevaloriza√ß√£o ou expectativas de crescimento.
        '''

        # Atributo que define a categoria do indicador. √â uma string simples.
        self.agrupador = 'Valuation'

        # Atributo que armazena a f√≥rmula do indicador como string.
        self.formula = 'P/VP = Pre√ßo da A√ß√£o / Valor Patrimonial por A√ß√£o'

    # M√©todo p√∫blico chamado avaliar. Recebe um argumento p_vp (esperado como n√∫mero: float ou int).
    # Avalia o valor de P/VP e retorna um dicion√°rio com a an√°lise correspondente.
    def avaliar(self, p_vp):
        # Bloco try/except usado para capturar exce√ß√µes que possam ocorrer durante a execu√ß√£o.
        # Protege contra erros como tipos inv√°lidos ou opera√ß√µes ilegais.
        try:
            # Estrutura condicional que verifica se o valor √© negativo.
            # Operador relacional < retorna True se p_vp for menor que zero.
            if p_vp < 0:
                # Chama o m√©todo auxiliar _resultado e retorna seu resultado.
                # Os argumentos s√£o passados como par√¢metros nomeados.
                return self._resultado(
                    classificacao='Cr√≠tico',
                    faixa='P/VP < 0',
                    descricao='''...''',
                    riscos='Alta probabilidade de fal√™ncia ou dilui√ß√£o acion√°ria em reestrutura√ß√µes.',
                    referencia='Avalie evaluate_debt_to_equity para sa√∫de financeira, evaluate_cash_flow para gera√ß√£o de caixa e evaluate_peg_ratio para perspectivas de crescimento.'
                )

            # Verifica se o valor est√° entre 0 e 1, inclusive.
            # Compara√ß√µes encadeadas s√£o v√°lidas em Python e retornam True se todas forem verdadeiras.
            elif 0 <= p_vp <= 1:
                return self._resultado(
                    classificacao='√ìtimo',
                    faixa='0 <= P/VP <= 1',
                    descricao='''...''',
                    riscos='Patrim√¥nio pode incluir ativos obsoletos.',
                    referencia='Analise evaluate_vpa para valor patrimonial e evaluate_roe para rentabilidade.'
                )

            # Verifica se o valor est√° entre 1 (exclusivo) e 1.5 (inclusivo).
            elif 1 < p_vp <= 1.5:
                return self._resultado(
                    classificacao='Moderado',
                    faixa='1 < P/VP <= 1.5',
                    descricao='''...''',
                    riscos='Estagna√ß√£o em setores maduros.',
                    referencia='Compare com evaluate_p_l para lucros e evaluate_pl_ativos para estrutura.'
                )

            # Verifica se o valor est√° entre 1.5 (exclusivo) e 2 (inclusivo).
            elif 1.5 < p_vp <= 2:
                return self._resultado(
                    classificacao='Ruim',
                    faixa='1.5 < P/VP <= 2',
                    descricao='''...''',
                    riscos='Expectativas n√£o realizadas podem levar a corre√ß√µes.',
                    referencia='Verifique evaluate_peg_ratio para crescimento e evaluate_evebitda para valuation.'
                )

            # Verifica se o valor est√° entre 2 (exclusivo) e 3 (inclusivo).
            elif 2 < p_vp <= 3:
                return self._resultado(
                    classificacao='P√©ssimo',
                    faixa='2 < P/VP <= 3',
                    descricao='''...''',
                    riscos='Sensibilidade a mudan√ßas econ√¥micas.',
                    referencia='Combine com evaluate_psr para receita e evaluate_margem_liquida para efici√™ncia.'
                )

            # Verifica se o valor √© maior que 3.
            elif p_vp > 3:
                return self._resultado(
                    classificacao='Fora da faixa',
                    faixa='P/VP > 3',
                    descricao='''...''',
                    riscos='Bolhas especulativas.',
                    referencia='Avalie evaluate_p_ativo para ativos e evaluate_crescimento_receita para tend√™ncias.'
                )

        # Bloco de tratamento de exce√ß√£o. Captura qualquer erro que ocorra no try.
        # A vari√°vel e cont√©m o objeto da exce√ß√£o, e str(e) converte a mensagem para string.
        except Exception as e:
            return self._erro(mensagem=str(e))

    # M√©todo auxiliar privado (por conven√ß√£o, prefixado com _) que monta e retorna um dicion√°rio.
    # Os dados s√£o organizados em pares chave-valor.
    def _resultado(self, classificacao, faixa, descricao, riscos, referencia):
        return {
            'classificacao': classificacao,  # String com a classifica√ß√£o do indicador
            'faixa': faixa,  # Faixa de valor analisada
            'descricao': descricao.strip(),  # Remove espa√ßos extras da descri√ß√£o
            'definicao': self.definicao.strip(),  # Remove espa√ßos extras da defini√ß√£o
            'agrupador': self.agrupador,  # Categoria do indicador
            'formula': self.formula,  # F√≥rmula usada para c√°lculo
            'riscos': riscos.strip(),  # Riscos associados √† faixa
            'referencia_cruzada': referencia.strip()  # Sugest√µes de an√°lise complementar
        }

    # M√©todo auxiliar que retorna um dicion√°rio de erro.
    # Usado quando ocorre uma exce√ß√£o durante a avalia√ß√£o.
    def _erro(self, mensagem):
        return {
            'classificacao': 'Erro',  # Indica que houve falha
            'faixa': 'N/A',  # Faixa n√£o aplic√°vel
            'descricao': f'''
                Ocorreu um erro ao processar o P/VP: {mensagem}.
                Verifique os dados de entrada e assegure que sejam num√©ricos v√°lidos.
            ''',  # Mensagem interpolada com f-string
            'definicao': self.definicao.strip(),  # Mant√©m a defini√ß√£o original
            'agrupador': self.agrupador,  # Mant√©m a categoria
            'formula': self.formula  # Mant√©m a f√≥rmula
        }


# üß™ Exemplo de uso da classe
avaliador = PVPEvaluator()  # Cria uma inst√¢ncia da classe, chamando __init__
resultado = avaliador.avaliar(1.2)  # Chama o m√©todo avaliar com o valor 1.2
print(resultado['classificacao'])  # Imprime a classifica√ß√£o retornada: 'Moderado'
print(resultado['formula'])  # Imprime a f√≥rmula usada: 'P/VP = Pre√ßo da A√ß√£o / Valor Patrimonial por A√ß√£o'
